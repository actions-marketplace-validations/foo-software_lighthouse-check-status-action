"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadUtil = void 0;
// a bit of a hack until we only support ES Modules
// note the key here:
// https://github.com/microsoft/TypeScript/pull/44501#issue-914346744
const loadUtil = async () => {
    const module = await Promise.resolve().then(() => __importStar(require('lighthouse/report/renderer/util.js')));
    return module.Util;
};
exports.loadUtil = loadUtil;
// inspired by:
// https://github.com/GoogleChrome/lighthouse/blob/8100b8034507e679c95b2fab5ab48965875443b6/report/renderer/performance-category-renderer.js#L98
const getWastedMs = (audit) => {
    if (audit.result.details && audit.result.details.type === 'opportunity') {
        const details = audit.result.details;
        if (typeof details.overallSavingsMs !== 'number') {
            throw new Error('non-opportunity details passed to getWastedMs');
        }
        return details.overallSavingsMs;
    }
    else {
        return Number.MIN_VALUE;
    }
};
// inspired by:
// https://github.com/GoogleChrome/lighthouse/blob/2e9c3c9b5f7d75b39be9d1e2ba116d49cf811f81/lighthouse-core/report/html/renderer/performance-category-renderer.js#L224-L226
exports.default = async (result) => {
    const Util = await (0, exports.loadUtil)();
    return result.categories.performance.auditRefs
        .reduce((accumulator, audit) => {
        const auditResult = result.audits[audit.id];
        const detailsType = auditResult?.details?.type;
        if (detailsType !== 'opportunity' || Util.showAsPassed(auditResult)) {
            return accumulator;
        }
        return [
            ...accumulator,
            {
                ...audit,
                result: {
                    ...auditResult,
                    // "average" | "fail" | "pass" | ...
                    rating: Util.calculateRating(auditResult.score, auditResult.scoreDisplayMode),
                },
            },
        ];
    }, [])
        .sort((auditA, auditB) => getWastedMs(auditB) - getWastedMs(auditA));
};
//# sourceMappingURL=getOpportunities.js.map